// Code generated by girgen. DO NOT EDIT.

package secret

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsecret-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsecret/secret.h>
// void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.secret_prompt_get_type()), F: marshalPrompter},
	})
}

// Prompt: proxy object representing a prompt that the Secret Service will
// display to the user.
type Prompt struct {
	gio.DBusProxy
}

func wrapPrompt(obj *externglib.Object) *Prompt {
	return &Prompt{
		DBusProxy: gio.DBusProxy{
			Object: obj,
			AsyncInitable: gio.AsyncInitable{
				Object: obj,
			},
			DBusInterface: gio.DBusInterface{
				Object: obj,
			},
			Initable: gio.Initable{
				Object: obj,
			},
		},
	}
}

func marshalPrompter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapPrompt(obj), nil
}

// Perform runs a prompt and performs the prompting. Returns TRUE if the prompt
// was completed and not dismissed.
//
// If window_id is non-null then it is used as an XWindow id on Linux. The API
// expects this id to be converted to a string using the <literal>d</literal>
// printf format. The Secret Service can make its prompt transient for the
// window with this id. In some Secret Service implementations this is not
// possible, so the behavior depending on this should degrade gracefully.
//
// This method will return immediately and complete asynchronously.
func (self *Prompt) Perform(ctx context.Context, windowId string, returnType *glib.VariantType, callback gio.AsyncReadyCallback) {
	var _arg0 *C.SecretPrompt       // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.gchar              // out
	var _arg2 *C.GVariantType       // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.SecretPrompt)(unsafe.Pointer(self.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(windowId)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GVariantType)(gextras.StructNative(unsafe.Pointer(returnType)))
	_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
	_arg5 = C.gpointer(gbox.AssignOnce(callback))

	C.secret_prompt_perform(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
}

// PerformFinish: complete asynchronous operation to run a prompt and perform
// the prompting.
//
// Returns a variant result if the prompt was completed and not dismissed. The
// type of result depends on the action the prompt is completing, and is defined
// in the Secret Service DBus API specification.
func (self *Prompt) PerformFinish(result gio.AsyncResulter) (*glib.Variant, error) {
	var _arg0 *C.SecretPrompt // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GVariant     // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SecretPrompt)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.secret_prompt_perform_finish(_arg0, _arg1, &_cerr)

	var _variant *glib.Variant // out
	var _goerr error           // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_variant_ref(_cret)
	runtime.SetFinalizer(_variant, func(v *glib.Variant) {
		C.g_variant_unref((*C.GVariant)(gextras.StructNative(unsafe.Pointer(v))))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _variant, _goerr
}

// PerformSync runs a prompt and performs the prompting. Returns a variant
// result if the prompt was completed and not dismissed. The type of result
// depends on the action the prompt is completing, and is defined in the Secret
// Service DBus API specification.
//
// If window_id is non-null then it is used as an XWindow id on Linux. The API
// expects this id to be converted to a string using the <literal>d</literal>
// printf format. The Secret Service can make its prompt transient for the
// window with this id. In some Secret Service implementations this is not
// possible, so the behavior depending on this should degrade gracefully.
//
// This method may block indefinitely and should not be used in user interface
// threads.
func (self *Prompt) PerformSync(ctx context.Context, windowId string, returnType *glib.VariantType) (*glib.Variant, error) {
	var _arg0 *C.SecretPrompt // out
	var _arg2 *C.GCancellable // out
	var _arg1 *C.gchar        // out
	var _arg3 *C.GVariantType // out
	var _cret *C.GVariant     // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SecretPrompt)(unsafe.Pointer(self.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(windowId)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = (*C.GVariantType)(gextras.StructNative(unsafe.Pointer(returnType)))

	_cret = C.secret_prompt_perform_sync(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _variant *glib.Variant // out
	var _goerr error           // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_variant_ref(_cret)
	runtime.SetFinalizer(_variant, func(v *glib.Variant) {
		C.g_variant_unref((*C.GVariant)(gextras.StructNative(unsafe.Pointer(v))))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _variant, _goerr
}

// Run runs a prompt and performs the prompting. Returns a variant result if the
// prompt was completed and not dismissed. The type of result depends on the
// action the prompt is completing, and is defined in the Secret Service DBus
// API specification.
//
// If window_id is non-null then it is used as an XWindow id on Linux. The API
// expects this id to be converted to a string using the <literal>d</literal>
// printf format. The Secret Service can make its prompt transient for the
// window with this id. In some Secret Service implementations this is not
// possible, so the behavior depending on this should degrade gracefully.
//
// This runs the dialog in a recursive mainloop. When run from a user interface
// thread, this means the user interface will remain responsive. Care should be
// taken that appropriate user interface actions are disabled while running the
// prompt.
func (self *Prompt) Run(ctx context.Context, windowId string, returnType *glib.VariantType) (*glib.Variant, error) {
	var _arg0 *C.SecretPrompt // out
	var _arg2 *C.GCancellable // out
	var _arg1 *C.gchar        // out
	var _arg3 *C.GVariantType // out
	var _cret *C.GVariant     // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SecretPrompt)(unsafe.Pointer(self.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(windowId)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = (*C.GVariantType)(gextras.StructNative(unsafe.Pointer(returnType)))

	_cret = C.secret_prompt_run(_arg0, _arg1, _arg2, _arg3, &_cerr)

	var _variant *glib.Variant // out
	var _goerr error           // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_variant_ref(_cret)
	runtime.SetFinalizer(_variant, func(v *glib.Variant) {
		C.g_variant_unref((*C.GVariant)(gextras.StructNative(unsafe.Pointer(v))))
	})
	_goerr = gerror.Take(unsafe.Pointer(_cerr))

	return _variant, _goerr
}
