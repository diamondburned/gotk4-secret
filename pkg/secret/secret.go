// Code generated by girgen. DO NOT EDIT.

package secret

import (
	"fmt"
	_ "runtime/cgo"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: libsecret-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsecret/secret.h>
import "C"

// glib.Type values for secret.go.
var GTypeError = externglib.Type(C.secret_error_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeError, F: marshalError},
	})
}

type Error C.gint

const (
	ErrorProtocol          Error = 1
	ErrorIsLocked          Error = 2
	ErrorNoSuchObject      Error = 3
	ErrorAlreadyExists     Error = 4
	ErrorInvalidFileFormat Error = 5
)

func marshalError(p uintptr) (interface{}, error) {
	return Error(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Error.
func (e Error) String() string {
	switch e {
	case ErrorProtocol:
		return "Protocol"
	case ErrorIsLocked:
		return "IsLocked"
	case ErrorNoSuchObject:
		return "NoSuchObject"
	case ErrorAlreadyExists:
		return "AlreadyExists"
	case ErrorInvalidFileFormat:
		return "InvalidFileFormat"
	default:
		return fmt.Sprintf("Error(%d)", e)
	}
}
