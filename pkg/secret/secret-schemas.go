// Code generated by girgen. DO NOT EDIT.

package secret

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libsecret-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <libsecret/secret.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.secret_schema_type_get_type()), F: marshalSchemaType},
	})
}

// SchemaType: different types of schemas for storing secrets, intended for use
// with secret_get_schema().
type SchemaType int

const (
	// SchemaTypeNote: personal passwords; see SECRET_SCHEMA_NOTE
	SchemaTypeNote SchemaType = iota
	// SchemaTypeCompatNetwork: network passwords from older libgnome-keyring
	// storage; see SECRET_SCHEMA_COMPAT_NETWORK
	SchemaTypeCompatNetwork
)

func marshalSchemaType(p uintptr) (interface{}, error) {
	return SchemaType(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for SchemaType.
func (s SchemaType) String() string {
	switch s {
	case SchemaTypeNote:
		return "Note"
	case SchemaTypeCompatNetwork:
		return "CompatNetwork"
	default:
		return fmt.Sprintf("SchemaType(%d)", s)
	}
}

// GetSchema: get a secret storage schema of the given type.
//
// C code may access the schemas (such as SECRET_SCHEMA_NOTE) directly, but
// language bindings cannot, and must use this accessor.
func GetSchema(typ SchemaType) *Schema {
	var _arg1 C.SecretSchemaType // out
	var _cret *C.SecretSchema    // in

	_arg1 = C.SecretSchemaType(typ)

	_cret = C.secret_get_schema(_arg1)

	var _schema *Schema // out

	_schema = (*Schema)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_schema, func(v *Schema) {
		C.secret_schema_unref((*C.SecretSchema)(gextras.StructNative(unsafe.Pointer(v))))
	})

	return _schema
}
